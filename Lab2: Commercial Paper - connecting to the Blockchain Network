**** Major thanks to IBM Washington Systems Center for their help ****

This lab is a technical introduction to blockchain, specifically smart contract development using the latest developer enhancements in the Linux Foundation’s Hyperledger Fabric v1.4.

This lab is based on Hyperledger Fabric commercial paper tutorial, that can be found here:
https://hyperledger-fabric.readthedocs.io/en/latest/tutorial/commercial_paper.html

Part I
In this lab, we will take you through connecting to an existing network, one that is running outside of in Visual Studio Code (VS Code). The network we will be using is the ‘basic-network’ used by the “Commercial Paper” Hyperledger Fabric tutorial, and we will stand this network up, run through a simple version of the tutorial and then extend the network with a new smart contract transaction.

The scenario the tutorial follows is one of a commercial paper trading network called PaperNet. Commercial paper itself is a type of unsecured lending in the form of a “promissory note”. The papers are normally issued by large corporations to raise funds to meet short-term financial obligations at a fixed rate of interest. Once issued at a fixed price, for a fixed term, another company or bank will purchase them at a discount to the face value and when the term is up, they will be redeemed for their face value.
As an example, if a paper was issued at a face value of 10 million USD for a 6-month term at 2% interest then it could be bought for 9.8 million USD (10M – 2%) by another company or bank who are happy to bear the risk that the issuer will not default. Once the term is up, then the paper could be redeemed or sold back to the issuer for their full face value of 10 million USD. Between buying and redemption, the paper can be bought or sold between different parties on a commercial paper market.
These three key steps of issue, buy and redeem are the main transactions in a simplified commercial paper marketplace, which we will mirror in our lab. We will see a commercial paper issued by a company called MagnetoCorp, and once issued on the PaperNet blockchain network another company called DigiBank will first buy the paper and then redeem it.
In diagram form it looks like this:

![Screenshot](Architecture.png)


1. Enter the following cd command to change directory to the basic network folder that we will use for this lab:

ubuntu@jf01:~$ cd git/src/github.com/hyperledger/fabric-samples/basic-network/
ubuntu@jf01:~/git/src/github.com/hyperledger/fabric-samples/basic-network$ 

2. Type the ls command and press enter to see the files that make up the basic- network.

ubuntu@jf01:~/git/src/github.com/hyperledger/fabric-samples/basic-network$ ls
README.md  configtx.yaml    connection.yaml  crypto-config.yaml  generate.sh  start.sh  teardown.sh
config     connection.json  crypto-config    docker-compose.yml  init.sh      stop.sh


These files contain the configuration for the basic-network along with a script to set it up. Feel free to have a look at their contents if you are curious. The main files of interest are start.sh and docker-compose.yml; you can open the files to view them with a command like “code start.sh” but make sure you do not change the contents of any of the files.

3. To start the network running, run the following command in your terminal start.sh: 

ubuntu@jf01:~/git/src/github.com/hyperledger/fabric-samples/basic-network$ ./start.sh
Note: make sure you enter the period ( . ) at the beginning of this command or the command will not be found.
This command is a script that starts the docker containers that make up the basic network and may take a minute or so to run. The command may output a warning which you can ignore. When it has finished, your terminal should look something like this:

# Create the channel
docker exec -e "CORE_PEER_LOCALMSPID=Org1MSP" -e "CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/msp/users/Admin@org1.example.com/msp" peer0.org1.example.com peer channel create -o orderer.example.com:7050 -c mychannel -f /etc/hyperledger/configtx/channel.tx
2020-01-23 16:59:10.530 UTC [channelCmd] InitCmdFactory -> INFO 001 Endorser and orderer connections initialized
2020-01-23 16:59:10.560 UTC [cli.common] readBlock -> INFO 002 Received block: 0
# Join peer0.org1.example.com to the channel.
docker exec -e "CORE_PEER_LOCALMSPID=Org1MSP" -e "CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/msp/users/Admin@org1.example.com/msp" peer0.org1.example.com peer channel join -b mychannel.block
2020-01-23 16:59:10.908 UTC [channelCmd] InitCmdFactory -> INFO 001 Endorser and orderer connections initialized
2020-01-23 16:59:10.982 UTC [channelCmd] executeJoin -> INFO 002 Successfully submitted proposal to join channel

Now let's take a look at the containers.

4. Run the command below in your terminal docker ps:
This command lists the docker containers that are running. Although this output is a little hard to read, you can make your terminal window wider to see the output better if you wish. 
This command shows that we have started four containers, one for each of the Hyperledger fabric-peer, fabric-ca, fabric-couchdb and fabric-orderer components. 
Together these make up the simple basic-network that we will be using. A more realistic setup would have multiple copies of the components to better reflect the multiple parties in the network, but for a lab this simple network will suffice. In a diagram form, the network looks like this:

ubuntu@jf01:~/git/src/github.com/hyperledger/fabric-samples/basic-network$ docker ps
CONTAINER ID        IMAGE                              COMMAND                  CREATED             STATUS              PORTS                                            NAMES
f3e4a0c597fd        hyperledger/fabric-peer:1.4.1      "peer node start"        31 seconds ago      Up 29 seconds       0.0.0.0:7051->7051/tcp, 0.0.0.0:7053->7053/tcp   peer0.org1.example.com
b6e69ff6af06        hyperledger/fabric-orderer:1.4.1   "orderer"                34 seconds ago      Up 32 seconds       0.0.0.0:7050->7050/tcp                           orderer.example.com
30d71804d58d        hyperledger/fabric-ca:1.4.1        "sh -c 'fabric-ca-se…"   34 seconds ago      Up 33 seconds       0.0.0.0:7054->7054/tcp                           ca.example.com
8508faada7f5        hyperledger/fabric-couchdb         "tini -- /docker-ent…"   34 seconds ago      Up 31 seconds       4369/tcp, 9100/tcp, 0.0.0.0:5984->5984/tcp       couchdb

Basic network:

5. These containers are joined together into the same docker network called net_basic. A docker network lets containers communicate with each other. Take a look at the network by running this command to inspect it:

docker network inspect net_basic
You should see output similar to this:

ubuntu@jf01:~/git/src/github.com/hyperledger/fabric-samples/basic-network$ docker network inspect net_basic
[
    {
        "Name": "net_basic",
        "Id": "0cd8c5d6a9aa8d355087b136e705207bc493c596ee9844cc3cf0f59b196fc3b2",
        "Created": "2020-01-23T17:52:01.788235583Z",
        "Scope": "local",
        "Driver": "bridge",
        "EnableIPv6": false,
        "IPAM": {
            "Driver": "default",
            "Options": null,
            "Config": [
                {
                    "Subnet": "192.168.64.0/20",
                    "Gateway": "192.168.64.1"
                }
            ]
        },
        "Internal": false,
        "Attachable": false,
        "Ingress": false,
        "ConfigFrom": {
            "Network": ""
        },
        "ConfigOnly": false,
        "Containers": {
            "30d71804d58de41efc59dbb7fd12cd6fa0ddb8b16c671d3345d4d6975b649329": {
                "Name": "ca.example.com",
                "EndpointID": "4b83e80873897bf3577811578099dc69a50aee4f59669b7d30bf43e7f5fa1d4f",
                "MacAddress": "02:42:c0:a8:40:02",
                "IPv4Address": "192.168.64.2/20",
                "IPv6Address": ""
            },
            "8508faada7f516fcb33165248114c26b1dd00baae9a96bb62539e2f7d1792f35": {
                "Name": "couchdb",
                "EndpointID": "6a9cb14f1417afde230adcd780d572e76a46a4fbf2ca6a964b0a7dd018c8caa3",
                "MacAddress": "02:42:c0:a8:40:03",
                "IPv4Address": "192.168.64.3/20",
                "IPv6Address": ""
            },
            "b6e69ff6af067e51192deb6799f63a985da7c437aec8a7614e73aa0588f61304": {
                "Name": "orderer.example.com",
                "EndpointID": "ac7d9726ecdf04e638132f7dfba9c6c7a8f6dc6ad85c65bb0f0aba0ab13cbad1",
                "MacAddress": "02:42:c0:a8:40:04",
                "IPv4Address": "192.168.64.4/20",
                "IPv6Address": ""
            },
            "f3e4a0c597fdec085bd0cf52e77fcb034df7d4c46e56bb56024d1f6a8feb4d67": {
                "Name": "peer0.org1.example.com",
                "EndpointID": "e127d2191ec9c79bc95e29ecd103495ee960d04179ea2800f3f6643ccaa0bacf",
                "MacAddress": "02:42:c0:a8:40:05",
                "IPv4Address": "192.168.64.5/20",
                "IPv6Address": ""
            }
        },
        "Options": {},
        "Labels": {}
    }
]
ubuntu@jf01:~/git/src/github.com/hyperledger/fabric-samples/basic-network$ 

Scroll back up and look at the output. You can see that each of the containers have their own IP address inside the same network so they can communicate with each other.
Next, we will begin working as if we were an administrator for MagnetoCorp who would want to see combined logs from all these components. Although proper dashboards could be created, we will use a simple log viewing tool in this lab.

Part II

From the terminal, change to the following folder:
    cd ../commercial-paper/organization/magnetocorp/configuration/cli/
The full path should now be showing as:

ubuntu@jf01:~/git/src/github.com/hyperledger/fabric-samples/commercial-paper/organization/magnetocorp/configuration/cli$ 

Next, we are going to act as a MagnetoCorp administrator again and interact with the network. To do this we need to issue commands to the peer to install and instantiate smart contracts (also known as chaincode).  

Part III Running the Issue transaction as MagnetoCorp

First, let’s give our terminal a name so we know who we are running as by issuing the command:
   set-title MagnetoCorp
Prior to that, we need to add the set-title command to $HOME/.bashrc, by copying the following:

set-title(){
  ORIG=$PS1
  TITLE="\e]2;$@\a"
  PS1=${ORIG}${TITLE}
}

After that, let's reload our environment by issuing the command source $HOME/.bashrc

ubuntu@jf01:~/git/src/github.com/hyperledger/fabric-samples/commercial-paper/organization/magnetocorp/configuration/cli$ source $HOME/.bashrc

And let's give our terminal a name MagnetoCorp:
ubuntu@jf01:~/git/src/github.com/hyperledger/fabric-samples/commercial-paper/organization/magnetocorp/configuration/cli$ set-title MagnetoCorp
































© 2020 International Business Machines Corporation. No part of this document may be reproduced or transmitted in any form without written permission from IBM.
